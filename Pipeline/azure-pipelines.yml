trigger:
- main

resources:
  containers:
    - container: rabbitmq
      image: rabbitmq:3.9-alpine
      networks: 
      - testes
      ports:
        - 5672:5672 
    - container: mongodb
      image: mongo:latest
      networks: 
      - testes
      env:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: MongoDB2021!
      ports:
        - 27017:27017

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'CONEXÃO ACR'
  imageRepository: 'workeracoes'
  containerRegistry: 'container-registry.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'imagePullSecret-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  Path_Projeto: ./WorkerAcoes
  Path_Projeto_Testes: ./WorkerAcoes.IntegrationTests
  File_Log_Execucao_WorkerAcoes: log-execucao-workeracoes.txt
  IntervaloProcessamento: 5000
  MongoDB__ConnectionString: mongodb://root:MongoDB2021!@localhost:27017
  MongoDB__Database: DBAcoesTestes
  MongoDB__Collection: HistoricoAcoesTestes
  RabbitMQ__Queue: queue-acoes
  RabbitMQ__ConnectionString: amqp://guest:guest@localhost:5672/

stages:
- stage: Tests
  displayName: Tests stage
  jobs:
  - job: Testes
    displayName: Testes de integraçao
    pool:
      vmImage: $(vmImageName)
    services:
      rabbitmq: rabbitmq
      mongodb: mongodb
    steps:
    - script: docker container ls
      displayName: Exibir containers em execução
    - task: UseDotNet@2
      displayName: Instalar .NET 5.0.400
      inputs:
        packageType: 'sdk'
        version: '5.0.400'
    - script: |
        dotnet publish $(Path_Projeto) -c Release -o app
        cd ./app
        nohup dotnet WorkerAcoes.dll > $(File_Log_Execucao_WorkerAcoes) 2>&1 &
        echo 'Aguardando a inicialização da aplicação a ser testada...'
        sleep 20s
      displayName: Executar a aplicação a ser testada em background (nohup)
    - task: DotNetCoreCLI@2
      displayName: Execução dos testes de integração
      inputs:
        command: 'test'
        projects: '$(Path_Projeto_Testes)'
    - script: |
        cd ./app
        cat $(File_Log_Execucao_WorkerAcoes)
      displayName: Exibir log de execução da aplicação testada
      condition: Always()

- stage: Build
  dependsOn: Tests
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push da imagem para o Azure Container Registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'RabbitMQIntegrationTests.acoes'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          - task: KubernetesManifest@0
            displayName: Deploy no Azure Kubernetes Service
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)